// script 
use coref::java::*

schema ECGNode extends ElementParent {}

impl ECGNode {
    pub fn __all__(db: JavaDB) -> *ECGNode {
        for (tmp in ElementParent(db)) {
            for (m in Method(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Variable(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Expression(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (m in Method(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Method") {
                        return t
                    }
                }
            }
            for (m in LocalVariable(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "LocalVariable") {
                        return t
                    }
                }
            }
            for (m in Parameter(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Parameter") {
                        return t
                    }
                }
            }
            for (m in Field(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Field") {
                        return t
                    }
                }
            }
            for (m in EnumConstant(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "EnumConstant") {
                        return t
                    }
                }
            }
            for (m in Expression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = m.getType()) {
                        return t
                    }
                }
            }
        }
    }
    
    pub fn getDDNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (e in Parameter(__all_data__),
                c in Method(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        for (auto_tmp1 in c.getParameter()) {
                            if (e = auto_tmp1) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = e.getEnclosingCallable()) {
                            for (m in Method(__all_data__)) {
                                if (m = e.getMethod()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                            for (f in LombokField(__all_data__)) {
                                if (f = e.getLombokField()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp_find = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp_find)) {
                                        if (n = c.getMethodName()) {
                                            if (Self::tmp_0(n)) {
                                                if (direction = "Depended") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                            if (!Self::tmp_0(n)) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Variable(__all_data__),
                c in CallExpression(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp2 in c.getArguments()) {
                                if (r.key_eq(auto_tmp2)) {
                                    if (e.key_eq(r.getDefinition())) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp3 in c.getArguments()) {
                                if (e.key_eq(auto_tmp3)) {
                                    if (direction = "Depended") {
                                        if (type = "DD") {
                                            return e1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__),
                s in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp4 in c.getAnAncestor()) {
                                if (s.getReference().key_eq(auto_tmp4)) {
                                    for (auto_tmp5 in s.getArguments()) {
                                        if (auto_tmp5.key_eq(e)) {
                                            if (direction = "Depended") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorDDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (type = "DD") {
                if (e = self.getDDNode(type, direction)) {
                    return e
                }
                if (e = self.getAnAncestorDDNode(__all_data__, __all_data__).getDDNode(type, direction)) {
                    return e
                }
            }
        }
    }
    
    pub fn getCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (self.key_eq(r.getDefinition())) {
                if (c = r.getEnclosingCallable()) {
                    if (type = "CD") {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getAnAncestorCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getAnAncestorCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getAnAncestorCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getAnAncestorCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDNode(type, direction)) {
                return e
            }
            if (e = self.getDDNode(type, direction)) {
                return e
            }
        }
    }
    
    pub fn getAnAncestorECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), tmp in ECGNode(__all_data__)) {
            if (tmp = self.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (e = tmp.getECGNode(type, direction)) {
                    return e
                }
            }
        }
    }

    pub fn getAnAncestorCDDependedNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), c in Callable(__all_data__), r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c) || (self.key_eq(r.getDefinition()) && r.getEnclosingCallable() = c)) {
                    for (e2 in Method(__all_data__), c_caller in c.getAnAncestorCaller()) {
                        if (e2.key_eq(c_caller) && direction = "Depended" && e.key_eq(e2)) {
                            return e
                        }
                    }
                }
            }
        }
    }

    pub fn getECGDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDDependsNode(type, direction)) {
                return e
            }
            if (e = self.getDDDependsNode(type, direction)) {
                return e
            }
        }
    }

    pub fn getCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in c.getCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
            }
            for (v in Variable(__all_data__)) {
                if (self.key_eq(v)) {
                    if (v.key_eq(r.getDefinition())) {
                        if (c = r.getEnclosingCallable()) {
                            if (type = "CD") {
                                for (e1 in c.getCallee()) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getDDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp)) {
                                        if (n = c.getMethodName()) {
                                            if (!n.matches("get.*")) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getAnAncestorCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in c.getAnAncestorCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in c.getAnAncestorCallee()) {
                            if (direction = "Depends") {
                                if (e.key_eq(e1)) {
                                    return e
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getPath(self) -> string {
        for (line in int::__undetermined_all__(),
            t in string::__undetermined_all__(),
            path in string::__undetermined_all__(),
            info in string::__undetermined_all__()) {
            for (l in coref::java::Location(__all_data__)) {
                if (l = self.getLocation()) {
                    if (path = l.getFile().getRelativePath()) {
                        if (line = l.getStartLineNumber()) {
                            if (t = line.to_string()) {
                                if (info = path + ":" + t) {
                                    return info
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    fn tmp_0(n: string) -> bool {
        if (n.matches("get.*")) {
            return true
        }
    }
}

pub fn gitdiff(filePath: string, lineNo: int) -> bool {
    //python替换
    // $gitdiff
    // example
    [ {"test", 1111} ]
}
pub fn transfertofile1(f: File, filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        if (gitdiff(filename, lineNumber)) {
            if (!filename.contains("src/test/java")) {
                if (filename = f.getRelativePath()) {
                    if (isCodeLine(f, filename, lineNumber)) {
                        return true
                    }
                }
            }
        }
    }
}
pub fn transfertofile(f: File, filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        if (transfertofile1(f, filename, lineNumber)) {
            if (!findSpecialCodeType(filename, lineNumber, __all_data__)) {
                return true
            }
        }
    }
}
pub fn isComment(filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        for (f in File(java_db)) {
            if (transfertofile1(f, filename, lineNumber)) {
                for (e in int::__undetermined_all__(),
                    s1 in int::__undetermined_all__()) {
                    for (c in Comment(java_db)) {
                        if (c.getLocation().getFile() = f) {
                            if (s1 = c.getLocation().getStartLineNumber()) {
                                if (e = c.getLocation().getEndLineNumber()) {
                                    if (lineNumber > s1 - 1) {
                                        if (lineNumber < e + 1) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (e in int::__undetermined_all__(),
                    s1 in int::__undetermined_all__()) {
                    for (c in JavadocComment(java_db)) {
                        if (c.getLocation().getFile() = f) {
                            if (s1 = c.getLocation().getStartLineNumber()) {
                                if (e = c.getLocation().getEndLineNumber()) {
                                    if (lineNumber > s1 - 1) {
                                        if (lineNumber < e + 1) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn isAnnotation(filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        for (f in File(java_db)) {
            if (transfertofile1(f, filename, lineNumber)) {
                for (e in int::__undetermined_all__(),
                    s1 in int::__undetermined_all__()) {
                    for (c in Annotation(java_db)) {
                        if (c.getLocation().getFile() = f) {
                            if (s1 = c.getLocation().getStartLineNumber()) {
                                if (e = c.getLocation().getEndLineNumber()) {
                                    if (lineNumber > s1 - 1) {
                                        if (lineNumber < e + 1) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn isCodeLine(f: File, filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        if (gitdiff(filename, lineNumber)) {
            if (f.getRelativePath() = filename) {
                for (e in int::__undetermined_all__(),
                    s1 in int::__undetermined_all__()) {
                    for (l in Location(java_db)) {
                        if (l.getFile() = f) {
                            if (s1 = l.getStartLineNumber()) {
                                if (e = l.getEndLineNumber()) {
                                    if (lineNumber > s1 - 1) {
                                        if (lineNumber < e + 1) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn isLog(filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        for (f in File(java_db)) {
            if (transfertofile1(f, filename, lineNumber)) {
                for (e in int::__undetermined_all__(),
                    s1 in int::__undetermined_all__(),
                    text in string::__undetermined_all__()) {
                    for (c in Expression(java_db)) {
                        if (c.getLocation().getFile() = f) {
                            if (s1 = c.getLocation().getStartLineNumber()) {
                                if (e = c.getLocation().getEndLineNumber()) {
                                    if (lineNumber > s1 - 1) {
                                        if (lineNumber < e + 1) {
                                            if (text = c.getPrintableText()) {
                                                if (text.matches("^logger\\..*")) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getTypeInAST(filename: string, lineNumber: int, typeInAST: string) -> bool {
    let (java_db = default_java_db()) {
        for (f in File(java_db)) {
            if (transfertofile(f, filename, lineNumber)) {
                for (e in int::__undetermined_all__(),
                    s1 in int::__undetermined_all__()) {
                    for (c in ElementParent(java_db)) {
                        if (c.getLocation().getFile() = f) {
                            if (s1 = c.getLocation().getStartLineNumber()) {
                                if (e = c.getLocation().getEndLineNumber()) {
                                    if (s1 = e) {
                                        if (lineNumber > s1 - 1) {
                                            if (lineNumber < e + 1) {
                                                if (typeInAST = c.getType()) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getTypeInECG(filename: string, lineNumber: int, typeInAST: string, n: ECGNode) -> bool {
    let (java_db = default_java_db()) {
        for (f in File(java_db)) {
            if (transfertofile(f, filename, lineNumber)) {
                if (tmp_0(filename, lineNumber)) {
                    if (typeInAST = "Callable") {
                        if (getBelongedCallable(filename, lineNumber, Callable(java_db).find(n))) {
                            return true
                        }
                    }
                }
                if (!(tmp_0(filename, lineNumber))) {
                    for (e in int::__undetermined_all__(),
                        s1 in int::__undetermined_all__()) {
                        if (n.getLocation().getFile() = f) {
                            if (s1 = n.getLocation().getStartLineNumber()) {
                                if (e = n.getLocation().getEndLineNumber()) {
                                    if (lineNumber > s1 - 1) {
                                        if (lineNumber < e + 1) {
                                            if (typeInAST = n.getType()) {
                                                if (isFieldOrEnum(ECGNode(java_db).find(n))) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn isFieldOrEnum(c: ECGNode) -> bool {
    let (java_db = default_java_db()) {
        for (f in Field(java_db)) {
            if (f.key_eq(c)) {
                return true
            }
        }
        for (e in EnumConstant(java_db)) {
            if (e.key_eq(c)) {
                return true
            }
        }
    }
}
pub fn findSpecialCodeType(filename: string, lineNumber: int, type: string) -> bool {
    let (java_db = default_java_db()) {
        if (isComment(filename, lineNumber)) {
            if (type = "comment") {
                return true
            }
        }
        if (isAnnotation(filename, lineNumber)) {
            if (type = "annotation") {
                return true
            }
        }
        if (isLog(filename, lineNumber)) {
            if (type = "log") {
                return true
            }
        }
    }
}
pub fn getBelongedCallable(filename: string, lineNumber: int, c: Callable) -> bool {
    let (java_db = default_java_db()) {
        for (f in File(java_db)) {
            if (transfertofile(f, filename, lineNumber)) {
                for (l1 in int::__undetermined_all__(),
                    l2 in int::__undetermined_all__()) {
                    for (i in Identifier(java_db)) {
                        if (f = c.getLocation().getFile()) {
                            if (c.key_eq(i.getParent())) {
                                if (l1 = i.getLocation().getStartLineNumber()) {
                                    if (l2 = c.getLocation().getEndLineNumber()) {
                                        if (lineNumber > l1 - 1) {
                                            if (lineNumber < l2 + 1) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getBelongedCallableSignature(filename: string, lineNumber: int, belongedCallable: string) -> bool {
    let (java_db = default_java_db()) {
        for (i in int::__undetermined_all__()) {
            for (c in Callable(java_db)) {
                if (transfertofile(__all_data__, filename, lineNumber)) {
                    if (i = tmp_1().len()) {
                        if (tmp_2(i)) {
                            if (belongedCallable = "") {
                                return true
                            }
                        }
                        if (!(tmp_2(i))) {
                            if (getBelongedCallable(filename, lineNumber, c)) {
                                if (belongedCallable = c.getSignature()) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getJavaECGNode(n: ECGNode) -> bool {
    let (java_db = default_java_db()) {
        for (lineNumber in int::__undetermined_all__(),
            filename in string::__undetermined_all__(),
            typeInAST in string::__undetermined_all__(),
            belongedCallable in string::__undetermined_all__()) {
            if (transfertofile(__all_data__, filename, lineNumber)) {
                if (getBelongedCallableSignature(filename, lineNumber, belongedCallable)) {
                    if (getTypeInECG(filename, lineNumber, typeInAST, n)) {
                        return true
                    }
                }
            }
        }
    }
}
@inline
pub fn trim(n: string, m: string) -> bool {
    let (java_db = default_java_db()) {
        for (i in int::__undetermined_all__()) {
            if (i = n.len()) {
                if (tmp_3(n)) {
                    if (m = n.substr(1,i - 2)) {
                        return true
                    }
                }
                if (!(tmp_3(n))) {
                    if (m = n) {
                        return true
                    }
                }
            }
        }
    }
}
@inline
pub fn contact(a: string, b: string, c: string) -> bool {
    let (java_db = default_java_db()) {
        for (i in int::__undetermined_all__(),
            temp in string::__undetermined_all__()) {
            if (i = a.len()) {
                if (tmp_4(i)) {
                    if (tmp_5(a, b)) {
                        if (c = b) {
                            return true
                        }
                    }
                    if (!(tmp_5(a, b))) {
                        if (c = a + b) {
                            return true
                        }
                    }
                }
                if (!(tmp_4(i))) {
                    if (tmp_6(a, i, b)) {
                        if (temp = a.substr(1,i - 1)) {
                            if (c = a + b) {
                                return true
                            }
                        }
                    }
                    if (!(tmp_6(a, i, b))) {
                        if (tmp_7(a, i, b)) {
                            if (c = a + "/" + b) {
                                return true
                            }
                        }
                        if (!(tmp_7(a, i, b))) {
                            if (c = a + b) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
schema HttpMethodType extends AnnotationAccessArgument {
    
}

impl HttpMethodType {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *HttpMethodType {
        for (tmp in AnnotationAccessArgument(db)) {
            if (tmp.getAnnotationArgumentName() = "method") {
                yield HttpMethodType {
                    id : tmp.id
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (a in AnnotationArrayInitializer(__all_data__)) {
                if (self.getArgumentValueHashId() = a.getParent().id) {
                    for (i in Identifier(__all_data__)) {
                        if (a.key_eq(i.getParent())) {
                            if (t = i.getName()) {
                                return t
                            }
                        }
                    }
                }
            }
            for (i in Identifier(__all_data__)) {
                if (self.getArgumentValueHashId() = i.getParent().id) {
                    if (t = i.getName()) {
                        return t
                    }
                }
            }
        }
    }
    
    
}

pub fn getMethodType(a: Annotation, t: string) -> bool {
    let (java_db = default_java_db()) {
        for (m in Method(java_db),
            h in HttpMethodType(java_db)) {
            for (auto_tmp1 in m.getAnnotation()) {
                if (a = auto_tmp1) {
                    if (tmp_8(a)) {
                        if (t = "POST") {
                            return true
                        }
                    }
                    if (!(tmp_8(a))) {
                        if (tmp_9(a)) {
                            if (t = "GET") {
                                return true
                            }
                        }
                        if (!(tmp_9(a))) {
                            if (tmp_10(a)) {
                                if (t = "PUT") {
                                    return true
                                }
                            }
                            if (!(tmp_10(a))) {
                                if (tmp_11(a)) {
                                    if (t = "DELETE") {
                                        return true
                                    }
                                }
                                if (!(tmp_11(a))) {
                                    if (tmp_12(a)) {
                                        if (t = "PATCH") {
                                            return true
                                        }
                                    }
                                    if (!(tmp_12(a))) {
                                        for (auto_tmp2 in a.getAnnotationArgument()) {
                                            if (h.key_eq(auto_tmp2)) {
                                                if (t = h.getType()) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getSubUri(a: Annotation, sub: string) -> bool {
    let (java_db = default_java_db()) {
        for (s in string::__undetermined_all__(),
            n in string::__undetermined_all__()) {
            for (temp in AnnotationAccessArgument(java_db),
                e in Expression(java_db)) {
                if (n = a.getName()) {
                    if (n.matches(".*Mapping")) {
                        for (auto_tmp1 in a.getAnnotationArgument()) {
                            if (temp = auto_tmp1) {
                                if (temp.getAnnotationArgumentName() = "value") {
                                    if (temp.key_eq(e.getParent())) {
                                        if (tmp_13(e)) {
                                            if (sub = connectStr(e)) {
                                                return true
                                            }
                                        }
                                        if (!(tmp_13(e))) {
                                            if (s = temp.getAnnotationArgumentValue()) {
                                                if (trim(s, sub)) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getUri(c: Class, m: Method, uri1: string) -> bool {
    let (java_db = default_java_db()) {
        for (l1 in string::__undetermined_all__(),
            l2 in string::__undetermined_all__(),
            uri in string::__undetermined_all__(),
            n in string::__undetermined_all__()) {
            for (a in Annotation(java_db),
                a1 in Annotation(java_db)) {
                if (c = m.getBelongedClass()) {
                    for (auto_tmp1 in m.getAnnotation()) {
                        if (a = auto_tmp1) {
                            for (auto_tmp2 in c.getAnnotation()) {
                                if (a1 = auto_tmp2) {
                                    if (n = a.getName()) {
                                        if (tmp_15(c)) {
                                            if (n = a.getName()) {
                                                if (n.matches(".*Mapping")) {
                                                    if (getSubUri(a, uri)) {
                                                        for (tt in string::__undetermined_all__()) {
                                                            for (w in WebFolder(java_db),
                                                                cc in WebCarClass(java_db)) {
                                                                if (tmp_19(w)) {
                                                                    if (uri1 = uri) {
                                                                        return true
                                                                    }
                                                                }
                                                                if (!(tmp_19(w))) {
                                                                    if (cc.key_eq(c)) {
                                                                        if (tt = cc.getWebFolder().getName()) {
                                                                            if (uri1 = "/" + tt + uri) {
                                                                                return true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (!(tmp_15(c))) {
                                            if (tmp_17(a)) {
                                                if (n.matches(".*Mapping")) {
                                                    if (getSubUri(a1, uri)) {
                                                        for (tt in string::__undetermined_all__()) {
                                                            for (w in WebFolder(java_db),
                                                                cc in WebCarClass(java_db)) {
                                                                if (tmp_19(w)) {
                                                                    if (uri1 = uri) {
                                                                        return true
                                                                    }
                                                                }
                                                                if (!(tmp_19(w))) {
                                                                    if (cc.key_eq(c)) {
                                                                        if (tt = cc.getWebFolder().getName()) {
                                                                            if (uri1 = "/" + tt + uri) {
                                                                                return true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (!(tmp_17(a))) {
                                                if (a1.getName() = "RequestMapping") {
                                                    if (n.matches(".*Mapping")) {
                                                        if (getSubUri(a, l1)) {
                                                            if (getSubUri(a1, l2)) {
                                                                if (contact(l2, l1, uri)) {
                                                                    for (tt in string::__undetermined_all__()) {
                                                                        for (w in WebFolder(java_db),
                                                                            cc in WebCarClass(java_db)) {
                                                                            if (tmp_19(w)) {
                                                                                if (uri1 = uri) {
                                                                                    return true
                                                                                }
                                                                            }
                                                                            if (!(tmp_19(w))) {
                                                                                if (cc.key_eq(c)) {
                                                                                    if (tt = cc.getWebFolder().getName()) {
                                                                                        if (uri1 = "/" + tt + uri) {
                                                                                            return true
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
schema WebFolder extends Folder {
    
}

impl WebFolder {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *WebFolder {
        for (tmp in Folder(db)) {
            yield WebFolder {
                element_hash_id : tmp.element_hash_id,
                qualified_name : tmp.qualified_name,
                name : tmp.name,
                parent_hash_id : tmp.parent_hash_id
            }
        }
    }
    
    pub fn getChild(self) -> Folder {
        for (f in Folder(__all_data__)) {
            if (self.element_hash_id = f.getParentHashId()) {
                return f
            }
        }
    }
    
    
}

schema WebCarFolder extends Folder {
    
}

impl WebCarFolder {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *WebCarFolder {
        for (tmp in Folder(db)) {
            yield WebCarFolder {
                element_hash_id : tmp.element_hash_id,
                qualified_name : tmp.qualified_name,
                name : tmp.name,
                parent_hash_id : tmp.parent_hash_id
            }
        }
    }
    
    pub fn getBelongedFolder(self) -> WebCarFolder {
        for (f in WebCarFolder(__all_data__)) {
            if (f.element_hash_id = self.getParentHashId()) {
                return f
            }
        }
    }
    
    pub fn getAnAncestorFolder(self) -> WebCarFolder {
        for (f in WebCarFolder(__all_data__)) {
            if (f = self.getBelongedFolder()) {
                return f
            }
            if (f = self.getBelongedFolder().getAnAncestorFolder()) {
                return f
            }
        }
    }
    
    
}

schema WebCarClass extends Class {
    
}

impl WebCarClass {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *WebCarClass {
        for (tmp in Class(db)) {
            for (f in WebCarFolder(db),
                w in WebFolder(db)) {
                if (f.key_eq(tmp.getContainingFile().getBelongedFolder())) {
                    if (f.getAnAncestorFolder().key_eq(w)) {
                        yield WebCarClass {
                            element_hash_id : tmp.element_hash_id,
                            qualified_name : tmp.qualified_name,
                            identifier_hash_id : tmp.identifier_hash_id,
                            location_hash_id : tmp.location_hash_id,
                            parent_hash_id : tmp.parent_hash_id
                        }
                    }
                }
            }
        }
    }
    
    pub fn getWebFolder(self) -> WebCarFolder {
        for (c in WebCarFolder(__all_data__)) {
            for (f in WebCarFolder(__all_data__),
                w in WebFolder(__all_data__)) {
                if (f.key_eq(self.getContainingFile().getBelongedFolder())) {
                    if (f.getAnAncestorFolder() = c) {
                        if (c.key_eq(w.getChild())) {
                            return c
                        }
                    }
                }
            }
        }
    }
    
    
}

pub fn resolve(r: ReferenceExpression, rr: string) -> bool {
    let (java_db = default_java_db()) {
        for (temp in string::__undetermined_all__()) {
            for (e in Expression(java_db)) {
                if (e.getParent() = r.getDefinition()) {
                    if (temp = e.getPrintableText()) {
                        if (trim(temp, rr)) {
                            return true
                        }
                    }
                }
            }
        }
    }
}
pub fn facts(a: Expression, i: int, value: string) -> bool {
    let (java_db = default_java_db()) {
        for (p in PolyadicExpression(java_db)) {
            if (a.key_eq(p)) {
                for (temp in string::__undetermined_all__()) {
                    for (e in Expression(java_db)) {
                        if (tmp_20(a)) {
                            if (resolve(ReferenceExpression(java_db).find(a), value)) {
                                if (i = 0) {
                                    return true
                                }
                            }
                        }
                        if (!(tmp_20(a))) {
                            if (a.key_eq(e.getParent())) {
                                if (i = e.getIndex()) {
                                    if (tmp_21(e)) {
                                        if (resolve(ReferenceExpression(java_db).find(e), value)) {
                                            return true
                                        }
                                    }
                                    if (!(tmp_21(e))) {
                                        if (temp = e.getPrintableText()) {
                                            if (trim(temp, value)) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        for (p in BinaryExpression(java_db)) {
            if (a.key_eq(p)) {
                for (temp in string::__undetermined_all__()) {
                    for (e in Expression(java_db)) {
                        if (tmp_20(a)) {
                            if (resolve(ReferenceExpression(java_db).find(a), value)) {
                                if (i = 0) {
                                    return true
                                }
                            }
                        }
                        if (!(tmp_20(a))) {
                            if (a.key_eq(e.getParent())) {
                                if (i = e.getIndex()) {
                                    if (tmp_21(e)) {
                                        if (resolve(ReferenceExpression(java_db).find(e), value)) {
                                            return true
                                        }
                                    }
                                    if (!(tmp_21(e))) {
                                        if (temp = e.getPrintableText()) {
                                            if (trim(temp, value)) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        for (p in ReferenceExpression(java_db)) {
            if (a.key_eq(p)) {
                for (temp in string::__undetermined_all__()) {
                    for (e in Expression(java_db)) {
                        if (tmp_20(a)) {
                            if (resolve(ReferenceExpression(java_db).find(a), value)) {
                                if (i = 0) {
                                    return true
                                }
                            }
                        }
                        if (!(tmp_20(a))) {
                            if (a.key_eq(e.getParent())) {
                                if (i = e.getIndex()) {
                                    if (tmp_21(e)) {
                                        if (resolve(ReferenceExpression(java_db).find(e), value)) {
                                            return true
                                        }
                                    }
                                    if (!(tmp_21(e))) {
                                        if (temp = e.getPrintableText()) {
                                            if (trim(temp, value)) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn connectStrBase(ID: Expression, index: int, res: string) -> bool {
    let (java_db = default_java_db()) {
        for (total in int::__undetermined_all__(),
            reStr in string::__undetermined_all__(),
            currStr in string::__undetermined_all__()) {
            if (total = tmp_22(ID).len()) {
                if (tmp_24(index)) {
                    if (facts(Expression(java_db).find(ID), index, currStr)) {
                        if (res = currStr) {
                            return true
                        }
                    }
                }
                if (!(tmp_24(index))) {
                    if (index > 0) {
                        if (connectStrBase(ID, index - 1, reStr)) {
                            if (facts(Expression(java_db).find(ID), index, currStr)) {
                                if (res = reStr + currStr) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn connectStr(ID: Expression) -> string {
    let (java_db = default_java_db()) {
        for (c in int::__undetermined_all__(), res in string::__undetermined_all__()) {
            if (c = tmp_25(ID).len()) {
                if (connectStrBase(ID, c - 1, res)) {
                    return res
                }
            }
        }
    }
}
pub fn getHttpMethod(m: Method) -> bool {
    let (java_db = default_java_db()) {
        for (n in string::__undetermined_all__(),
            className in string::__undetermined_all__(),
            methodSignature in string::__undetermined_all__(),
            uri in string::__undetermined_all__(),
            type in string::__undetermined_all__()) {
            for (c in Class(java_db),
                a in Annotation(java_db)) {
                if (getUri(c, m, uri)) {
                    if (className = c.getQualifiedName()) {
                        if (methodSignature = m.getSignature()) {
                            for (auto_tmp1 in m.getAnnotation()) {
                                if (a = auto_tmp1) {
                                    if (n = a.getName()) {
                                        if (n.matches(".*Mapping")) {
                                            if (tmp_29(a)) {
                                                if (type = "EMPTY") {
                                                    return true
                                                }
                                            }
                                            if (!(tmp_29(a))) {
                                                if (getMethodType(a, type)) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn real_output(nodeText: string, path: string) -> bool {
    let (java_db = default_java_db()) {
        for (direction in string::__undetermined_all__(),
            edgeType in string::__undetermined_all__()) {
            for (m in ECGNode(java_db),
                a in ECGNode(java_db),
                b in ECGNode(java_db),
                c in ECGNode(java_db)) {
                if (getJavaECGNode(a)) {
                    if (getHttpMethod(Method(java_db).find(m))) {
                        if (b = m.getAnAncestorCDDependsNode(__all_data__, __all_data__)) {
                            if (c = a.getAnAncestorCDDependedNode(__all_data__, __all_data__)) {
                                if (c = b.getECGDependsNode(edgeType, direction)) {
                                    if (b != c) {
                                        if (nodeText = m.print()) {
                                            if (path = m.getPath()) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                            if (c = a) {
                                if (c = b.getECGDependsNode(edgeType, direction)) {
                                    if (b != c) {
                                        if (nodeText = m.print()) {
                                            if (path = m.getPath()) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (b = m) {
                            if (c = a.getAnAncestorCDDependedNode(__all_data__, __all_data__)) {
                                if (c = b.getECGDependsNode(edgeType, direction)) {
                                    if (b != c) {
                                        if (nodeText = m.print()) {
                                            if (path = m.getPath()) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                            if (c = a) {
                                if (c = b.getECGDependsNode(edgeType, direction)) {
                                    if (b != c) {
                                        if (nodeText = m.print()) {
                                            if (path = m.getPath()) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_java_db() -> JavaDB {
    return JavaDB::load("coref_java_src.db")
}

fn tmp_0(filename: string, lineNumber: int) -> bool {
    let (java_db = default_java_db()) {
        if (getBelongedCallable(filename, lineNumber, __all_data__)) {
            return true
        }
    }
}

fn tmp_1() -> *string {
    for (filename in string::__undetermined_all__(), lineNumber in int::__undetermined_all__()) {
        if (getBelongedCallable(filename, lineNumber, __all_data__)) {
            yield filename
        }
    }
}

fn tmp_2(i: int) -> bool {
    let (java_db = default_java_db()) {
        if (i = 0) {
            return true
        }
    }
}

fn tmp_3(n: string) -> bool {
    let (java_db = default_java_db()) {
        if (n.substr(0,1) = "\"") {
            return true
        }
    }
}

fn tmp_4(i: int) -> bool {
    let (java_db = default_java_db()) {
        if (i = 1) {
            return true
        }
    }
}

fn tmp_5(a: string, b: string) -> bool {
    let (java_db = default_java_db()) {
        if (a.substr(0,1) = "/") {
            if (b.substr(0,1) = "/") {
                return true
            }
        }
    }
}

@inline
fn tmp_6(a: string, i: int, b: string) -> bool {
    let (java_db = default_java_db()) {
        if (a.substr(i - 1,i - 1) = "/") {
            if (b.substr(0,1) = "/") {
                return true
            }
        }
    }
}

@inline
fn tmp_7(a: string, i: int, b: string) -> bool {
    let (java_db = default_java_db()) {
        if (a.substr(i - 1,i - 1) != "/") {
            if (b.substr(0,1) != "/") {
                return true
            }
        }
    }
}

fn tmp_8(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (a.getName() = "PostMapping") {
            return true
        }
    }
}

fn tmp_9(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (a.getName() = "GetMapping") {
            return true
        }
    }
}

fn tmp_10(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (a.getName() = "PutMapping") {
            return true
        }
    }
}

fn tmp_11(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (a.getName() = "DeleteMapping") {
            return true
        }
    }
}

fn tmp_12(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (a.getName() = "PatchMapping") {
            return true
        }
    }
}

fn tmp_13(e: Expression) -> bool {
    let (java_db = default_java_db()) {
        if (facts(e, __all_data__, __all_data__)) {
            return true
        }
    }
}

fn tmp_14(c: Class) -> *Annotation {
    let (java_db = default_java_db()) {
        for (b in Annotation(java_db)) {
            for (auto_tmp3 in c.getAnnotation()) {
                if (b = auto_tmp3) {
                    if (b.getName() = "RequestMapping") {
                        yield b
                    }
                }
            }
        }
    }
}

fn tmp_15(c: Class) -> bool {
    let (java_db = default_java_db()) {
        if (tmp_14(c).len() = 0) {
            return true
        }
    }
}

fn tmp_16(a: Annotation) -> *AnnotationAccessArgument {
    let (java_db = default_java_db()) {
        for (b in AnnotationAccessArgument(java_db)) {
            for (auto_tmp4 in a.getAnnotationArgument()) {
                if (b = auto_tmp4) {
                    if (b.getAnnotationArgumentName() = "value") {
                        yield b
                    }
                }
            }
        }
    }
}

fn tmp_17(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (tmp_16(a).len() = 0) {
            return true
        }
    }
}

fn tmp_18(w: WebFolder) -> *Folder {
    let (java_db = default_java_db()) {
        for (f in Folder(java_db)) {
            if (f = w.getChild()) {
                yield f
            }
        }
    }
}

fn tmp_19(w: WebFolder) -> bool {
    let (java_db = default_java_db()) {
        if (tmp_18(w).len() = 1) {
            return true
        }
    }
}

fn tmp_20(a: Expression) -> bool {
    let (java_db = default_java_db()) {
        if (resolve(ReferenceExpression(java_db).find(a), __all_data__)) {
            return true
        }
    }
}

fn tmp_21(e: Expression) -> bool {
    let (java_db = default_java_db()) {
        if (resolve(ReferenceExpression(java_db).find(e), __all_data__)) {
            return true
        }
    }
}

fn tmp_22(ID: Expression) -> *auto_tmp_23 {
    let (java_db = default_java_db()) {
        for (auto_tmp_var_0 in int::__undetermined_all__(),
            auto_tmp_var_1 in string::__undetermined_all__()) {
            if (facts(Expression(java_db).find(ID), auto_tmp_var_0, auto_tmp_var_1)) {
                yield auto_tmp_23 {
                    auto_tmp_var_0 : auto_tmp_var_0,
                    auto_tmp_var_1 : auto_tmp_var_1
                }
            }
        }
    }
}

schema auto_tmp_23 {
    auto_tmp_var_0 : int,
    auto_tmp_var_1 : string
}

fn tmp_24(index: int) -> bool {
    let (java_db = default_java_db()) {
        if (index = 0) {
            return true
        }
    }
}

fn tmp_25(ID: Expression) -> *auto_tmp_26 {
    let (java_db = default_java_db()) {
        for (auto_tmp_var_0 in int::__undetermined_all__(),
            auto_tmp_var_1 in string::__undetermined_all__()) {
            if (facts(Expression(java_db).find(ID), auto_tmp_var_0, auto_tmp_var_1)) {
                yield auto_tmp_26 {
                    auto_tmp_var_0 : auto_tmp_var_0,
                    auto_tmp_var_1 : auto_tmp_var_1
                }
            }
        }
    }
}

schema auto_tmp_26 {
    auto_tmp_var_0 : int,
    auto_tmp_var_1 : string
}

fn tmp_27(a: Annotation) -> *auto_tmp_28 {
    let (java_db = default_java_db()) {
        for (auto_tmp_var_0 in string::__undetermined_all__()) {
            if (getMethodType(a, auto_tmp_var_0)) {
                yield auto_tmp_28 {
                    auto_tmp_var_0 : auto_tmp_var_0
                }
            }
        }
    }
}

schema auto_tmp_28 {
    auto_tmp_var_0 : string
}

fn tmp_29(a: Annotation) -> bool {
    let (java_db = default_java_db()) {
        if (tmp_27(a).len() = 0) {
            return true
        }
    }
}

fn main() {
    output(real_output())
}