// script 
use coref::java::*
use coref::xml::*

schema ECGNode extends ElementParent {}

impl ECGNode {
    pub fn __all__(db: JavaDB) -> *ECGNode {
        for (tmp in ElementParent(db)) {
            for (m in Method(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Variable(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Expression(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (m in Method(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Method") {
                        return t
                    }
                }
            }
            for (m in LocalVariable(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "LocalVariable") {
                        return t
                    }
                }
            }
            for (m in Parameter(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Parameter") {
                        return t
                    }
                }
            }
            for (m in Field(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Field") {
                        return t
                    }
                }
            }
            for (m in EnumConstant(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "EnumConstant") {
                        return t
                    }
                }
            }
            for (m in Expression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = m.getType()) {
                        return t
                    }
                }
            }
        }
    }
    
    pub fn getDDNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (e in Parameter(__all_data__),
                c in Method(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        for (auto_tmp1 in c.getParameter()) {
                            if (e = auto_tmp1) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = e.getEnclosingCallable()) {
                            for (m in Method(__all_data__)) {
                                if (m = e.getMethod()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                            for (f in LombokField(__all_data__)) {
                                if (f = e.getLombokField()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp_find = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp_find)) {
                                        if (n = c.getMethodName()) {
                                            if (Self::tmp_0(n)) {
                                                if (direction = "Depended") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                            if (!Self::tmp_0(n)) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Variable(__all_data__),
                c in CallExpression(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp2 in c.getArguments()) {
                                if (r.key_eq(auto_tmp2)) {
                                    if (e.key_eq(r.getDefinition())) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp3 in c.getArguments()) {
                                if (e.key_eq(auto_tmp3)) {
                                    if (direction = "Depended") {
                                        if (type = "DD") {
                                            return e1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__),
                s in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp4 in c.getAnAncestor()) {
                                if (s.getReference().key_eq(auto_tmp4)) {
                                    for (auto_tmp5 in s.getArguments()) {
                                        if (auto_tmp5.key_eq(e)) {
                                            if (direction = "Depended") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorDDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (type = "DD") {
                if (e = self.getDDNode(type, direction)) {
                    return e
                }
                if (e = self.getAnAncestorDDNode(__all_data__, __all_data__).getDDNode(type, direction)) {
                    return e
                }
            }
        }
    }
    
    pub fn getCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (self.key_eq(r.getDefinition())) {
                if (c = r.getEnclosingCallable()) {
                    if (type = "CD") {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getAnAncestorCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getAnAncestorCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getAnAncestorCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getAnAncestorCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDNode(type, direction)) {
                return e
            }
            if (e = self.getDDNode(type, direction)) {
                return e
            }
        }
    }
    
    pub fn getAnAncestorECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), tmp in ECGNode(__all_data__)) {
            if (tmp = self.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (e = tmp.getECGNode(type, direction)) {
                    return e
                }
            }
        }
    }

    pub fn getAnAncestorCDDependedNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), c in Callable(__all_data__), r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c) || (self.key_eq(r.getDefinition()) && r.getEnclosingCallable() = c)) {
                    for (e2 in Method(__all_data__), c_caller in c.getAnAncestorCaller()) {
                        if (e2.key_eq(c_caller) && direction = "Depended" && e.key_eq(e2)) {
                            return e
                        }
                    }
                }
            }
        }
    }

    pub fn getECGDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDDependsNode(type, direction)) {
                return e
            }
            if (e = self.getDDDependsNode(type, direction)) {
                return e
            }
        }
    }

    pub fn getCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in c.getCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
            }
            for (v in Variable(__all_data__)) {
                if (self.key_eq(v)) {
                    if (v.key_eq(r.getDefinition())) {
                        if (c = r.getEnclosingCallable()) {
                            if (type = "CD") {
                                for (e1 in c.getCallee()) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getDDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp)) {
                                        if (n = c.getMethodName()) {
                                            if (!n.matches("get.*")) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getAnAncestorCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in c.getAnAncestorCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in c.getAnAncestorCallee()) {
                            if (direction = "Depends") {
                                if (e.key_eq(e1)) {
                                    return e
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getPath(self) -> string {
        for (line in int::__undetermined_all__(),
            t in string::__undetermined_all__(),
            path in string::__undetermined_all__(),
            info in string::__undetermined_all__()) {
            for (l in coref::java::Location(__all_data__)) {
                if (l = self.getLocation()) {
                    if (path = l.getFile().getRelativePath()) {
                        if (line = l.getStartLineNumber()) {
                            if (t = line.to_string()) {
                                if (info = path + ":" + t) {
                                    return info
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    fn tmp_0(n: string) -> bool {
        if (n.matches("get.*")) {
            return true
        }
    }
}

schema ECGXmlNode {
    @primary id: int
}

impl ECGXmlNode {
    pub fn __all__(db: XmlDB) -> *ECGXmlNode {
        for (e in XmlPomElement(db)) {
            yield ECGXmlNode {id : e.id}
        }
        for (e in XmlSpringElement(db)) {
            yield ECGXmlNode {id : e.id}
        }
        for (e in XmlCharacter(db)) {
            yield ECGXmlNode {id : e.id}
        }
        for (e in XmlAttribute(db)) {
            yield ECGXmlNode {id : e.id}
        }
    }
    
    pub fn getLocation(self) -> coref::xml::Location {
        for (l in coref::xml::Location(__all_data__)) {
            for (e in XmlElement(__all_data__)) {
                if (self.key_eq(e)) {
                    if (l = e.getLocation()) {
                        return l
                    }
                }
            }
            for (e in XmlAttribute(__all_data__)) {
                if (self.key_eq(e)) {
                    if (l = e.getLocation()) {
                        return l
                    }
                }
            }
            for (e in XmlCharacter(__all_data__)) {
                if (self.key_eq(e)) {
                    if (l = e.getLocation()) {
                        return l
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (e in XmlElement(__all_data__)) {
                if (self.key_eq(e)) {
                    if (t = "XmlElement") {
                        return t
                    }
                }
            }
            for (e in XmlAttribute(__all_data__)) {
                if (self.key_eq(e)) {
                    if (t = "XmlAttribute") {
                        return t
                    }
                }
            }
            for (e in XmlCharacter(__all_data__)) {
                if (self.key_eq(e)) {
                    if (t = "XmlCharacter") {
                        return t
                    }
                }
            }
        }
    }

    pub fn getText(self) -> string {
        for (e in XmlElement(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getName()
            }
        }
        for (e in XmlAttribute(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getName() + " = " + e.getValue()
            }
        }
        for (e in XmlCharacter(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getText()
            }
        }
    }

    pub fn getEnclosingECGXmlNode(self) -> ECGXmlNode {
        for (e in XmlElement(__all_data__)) {
            if (self.key_eq(e)) {
                return e.to<ECGXmlNode>()
            }
        }
        for (e in XmlAttribute(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getXmlElement().to<ECGXmlNode>()
            }
        }
        for (e in XmlCharacter(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getBelongedElement().to<ECGXmlNode>()
            }
        }
    }
}

pub fn getJavaECGNode(id: int) -> bool {
    // #javaxmlnode
    // example
    [ {1111} ]
}
pub fn getXmlECGNode(id: int) -> bool {
    // #xmlecgnode
    // example
    [ {1111} ]
}
schema SofaService extends Annotation {
    
}

impl SofaService {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *SofaService {
        for (tmp in Annotation(db)) {
            if (tmp.getName() = "SofaService") {
                yield SofaService {
                    id : tmp.id
                }
            }
        }
    }
    
    pub fn getService(self) -> ClassOrInterface {
        for (value in string::__undetermined_all__()) {
            for (i in ClassOrInterface(__all_data__),
                argus in AnnotationAccessArgument(__all_data__)) {
                for (auto_tmp1 in self.getAnnotationArgument()) {
                    if (argus = auto_tmp1) {
                        if (argus.getAnnotationArgumentName() = "interfaceType") {
                            if (value = argus.getAnnotationArgumentValue()) {
                                if (i.getQualifiedName() = value) {
                                    return i
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    @inline
    pub fn getBinding(self) -> SofaServiceBinding {
        for (b in SofaServiceBinding(__all_data__),
            argus in AnnotationAccessArgument(__all_data__)) {
            for (auto_tmp1 in self.getAnnotationArgument()) {
                if (argus = auto_tmp1) {
                    if (argus.getAnnotationArgumentName() = "bindings") {
                        if (b.key_eq(argus.getArgumentAnnotation())) {
                            return b
                        }
                        if (argus.key_eq(b.getParent())) {
                            return b
                        }
                    }
                }
            }
        }
    }
    
    @inline
    pub fn getUniqueId(self) -> string {
        for (uniqueId in string::__undetermined_all__()) {
            for (anno in Annotation(__all_data__)) {
                if (self.key_eq(anno)) {
                    if (tmp_2(anno)) {
                        for (argus in AnnotationAccessArgument(__all_data__)) {
                            for (auto_tmp1 in anno.getAnnotationArgument()) {
                                if (argus = auto_tmp1) {
                                    if (argus.getAnnotationArgumentName() = "uniqueId") {
                                        if (uniqueId = argus.getAnnotationArgumentValue()) {
                                            return uniqueId
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!(tmp_2(anno))) {
                        if (uniqueId = "null") {
                            return uniqueId
                        }
                    }
                }
            }
        }
    }
    
    
}

pub fn uniqueArgument(anno: Annotation) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (argus in AnnotationAccessArgument(java_db)) {
                for (auto_tmp1 in anno.getAnnotationArgument()) {
                    if (argus = auto_tmp1) {
                        if (argus.getAnnotationArgumentName() = "uniqueId") {
                            return true
                        }
                    }
                }
            }
        }
    }
}
schema SofaServiceBinding extends Annotation {
    
}

impl SofaServiceBinding {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *SofaServiceBinding {
        for (tmp in Annotation(db)) {
            if (tmp.getName() = "SofaServiceBinding") {
                yield SofaServiceBinding {
                    id : tmp.id
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (value in string::__undetermined_all__()) {
            for (argus in AnnotationAccessArgument(__all_data__)) {
                for (auto_tmp1 in self.getAnnotationArgument()) {
                    if (argus = auto_tmp1) {
                        if (argus.getAnnotationArgumentName() = "bindingType") {
                            if (value = argus.getAnnotationArgumentValue()) {
                                return value
                            }
                        }
                    }
                }
            }
        }
    }
    
    
}

pub fn javaOutput(classname: string, name: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (s in SofaService(java_db),
                c in Class(java_db),
                i in ClassOrInterface(java_db)) {
                for (auto_tmp1 in c.getAnnotation()) {
                    if (s.key_eq(auto_tmp1)) {
                        if (classname = c.getQualifiedName()) {
                            for (auto_tmp2 in c.getImplementsInterface()) {
                                if (i.key_eq(auto_tmp2)) {
                                    if (name = i.getQualifiedName()) {
                                        return true
                                    }
                                }
                            }
                            if (i = s.getService()) {
                                if (name = i.getQualifiedName()) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn xmlOutput(className: string, interfaceName: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (temp in string::__undetermined_all__()) {
                for (s in SofaServiceXmlElement(xml_db),
                    b in BeanXmlElement(xml_db)) {
                    if (s.getRef() = b.getId()) {
                        if (interfaceName = s.getInterfaceName()) {
                            if (className = b.getClass()) {
                                if (temp = b.getLocation().getFile().getRelativePath()) {
                                    if (!temp.contains("src/test/resources")) {
                                        return true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn annoOutput(className: string, interfaceName: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (v in string::__undetermined_all__(),
                k in string::__undetermined_all__()) {
                for (s in SofaServiceXmlElement(xml_db),
                    b in Class(java_db),
                    t in TagXmlElement(xml_db),
                    a in Annotation(java_db)) {
                    if (s.key_eq(t.getParent())) {
                        if (v = s.getRef()) {
                            if (interfaceName = s.getInterfaceName()) {
                                for (auto_tmp1 in b.getAnnotation()) {
                                    if (a = auto_tmp1) {
                                        if (a.getName() = k) {
                                            if (getTrAnnotationName(k)) {
                                                for (auto_tmp2 in a.getAnnotationArgument()) {
                                                    if (auto_tmp2.getAnnotationArgumentValue() = "\"" + v + "\"") {
                                                        if (className = b.getQualifiedName()) {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getTrAnnotationName(a: string) -> bool {
    [
        {"Service"},
        {"Component"},
        {"Scope"},
        {"Repository"},
        {"Controller"},
        {"RestController"},
        {"RequestMapping"},
        {"PathVariable"},
        {"ResponseBody"},
        {"bean"}
    ]
}
pub fn real_output(className: string, interfaceName: string, id: int, name: string, tag: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (i in int::__undetermined_all__(),
                j in int::__undetermined_all__()) {
                if (xmlOutput(className, interfaceName)) {
                    for (temp in string::__undetermined_all__()) {
                        for (e1 in ECGNode(java_db),
                            e2 in ECGXmlNode(xml_db),
                            c in ClassOrInterface(java_db)) {
                            if (getJavaECGNode(e1.id)) {
                                if (getXmlECGNode(e2.id)) {
                                    if (c.key_eq(e1.getElementParent())) {
                                        if (temp = c.getQualifiedName()) {
                                            if (id = e1.id) {
                                                if (temp = className) {
                                                    if (name = e1.print()) {
                                                        if (tag = "Java") {
                                                            return true
                                                        }
                                                    }
                                                }
                                                if (temp = interfaceName) {
                                                    if (name = e1.print()) {
                                                        if (tag = "Java") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                            if (e2.id = i) {
                                                if (id = e2.id) {
                                                    if (name = e2.getText()) {
                                                        if (tag = "xml") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                            if (e2.id = j) {
                                                if (id = e2.id) {
                                                    if (name = e2.getText()) {
                                                        if (tag = "xml") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (javaOutput(className, interfaceName)) {
                    for (temp in string::__undetermined_all__()) {
                        for (e1 in ECGNode(java_db),
                            e2 in ECGXmlNode(xml_db),
                            c in ClassOrInterface(java_db)) {
                            if (getJavaECGNode(e1.id)) {
                                if (getXmlECGNode(e2.id)) {
                                    if (c.key_eq(e1.getElementParent())) {
                                        if (temp = c.getQualifiedName()) {
                                            if (id = e1.id) {
                                                if (temp = className) {
                                                    if (name = e1.print()) {
                                                        if (tag = "Java") {
                                                            return true
                                                        }
                                                    }
                                                }
                                                if (temp = interfaceName) {
                                                    if (name = e1.print()) {
                                                        if (tag = "Java") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                            if (e2.id = i) {
                                                if (id = e2.id) {
                                                    if (name = e2.getText()) {
                                                        if (tag = "xml") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                            if (e2.id = j) {
                                                if (id = e2.id) {
                                                    if (name = e2.getText()) {
                                                        if (tag = "xml") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (annoOutput(className, interfaceName)) {
                    for (temp in string::__undetermined_all__()) {
                        for (e1 in ECGNode(java_db),
                            e2 in ECGXmlNode(xml_db),
                            c in ClassOrInterface(java_db)) {
                            if (getJavaECGNode(e1.id)) {
                                if (getXmlECGNode(e2.id)) {
                                    if (c.key_eq(e1.getElementParent())) {
                                        if (temp = c.getQualifiedName()) {
                                            if (id = e1.id) {
                                                if (temp = className) {
                                                    if (name = e1.print()) {
                                                        if (tag = "Java") {
                                                            return true
                                                        }
                                                    }
                                                }
                                                if (temp = interfaceName) {
                                                    if (name = e1.print()) {
                                                        if (tag = "Java") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                            if (e2.id = i) {
                                                if (id = e2.id) {
                                                    if (name = e2.getText()) {
                                                        if (tag = "xml") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                            if (e2.id = j) {
                                                if (id = e2.id) {
                                                    if (name = e2.getText()) {
                                                        if (tag = "xml") {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_java_db() -> JavaDB {
    return JavaDB::load("coref_java_src.db")
}

fn default_xml_db() -> XmlDB {
    return XmlDB::load("coref_xml_src.db")
}

fn tmp_0(anno: Annotation) -> *auto_tmp_1 {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            if (uniqueArgument(anno)) {
                yield auto_tmp_1 {
                    
                }
            }
        }
    }
}

schema auto_tmp_1 {
    
}

fn tmp_2(anno: Annotation) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            if (tmp_0(anno).len() = 1) {
                return true
            }
        }
    }
}

fn main() {
    output(real_output())
}