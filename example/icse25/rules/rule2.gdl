// script 
use coref::java::*

schema ECGNode extends ElementParent {}

impl ECGNode {
    pub fn __all__(db: JavaDB) -> *ECGNode {
        for (tmp in ElementParent(db)) {
            for (m in Method(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Variable(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Expression(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (m in Method(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Method") {
                        return t
                    }
                }
            }
            for (m in LocalVariable(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "LocalVariable") {
                        return t
                    }
                }
            }
            for (m in Parameter(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Parameter") {
                        return t
                    }
                }
            }
            for (m in Field(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Field") {
                        return t
                    }
                }
            }
            for (m in EnumConstant(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "EnumConstant") {
                        return t
                    }
                }
            }
            for (m in Expression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = m.getType()) {
                        return t
                    }
                }
            }
        }
    }
    
    pub fn getDDNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (e in Parameter(__all_data__),
                c in Method(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        for (auto_tmp1 in c.getParameter()) {
                            if (e = auto_tmp1) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = e.getEnclosingCallable()) {
                            for (m in Method(__all_data__)) {
                                if (m = e.getMethod()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                            for (f in LombokField(__all_data__)) {
                                if (f = e.getLombokField()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp_find = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp_find)) {
                                        if (n = c.getMethodName()) {
                                            if (Self::tmp_0(n)) {
                                                if (direction = "Depended") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                            if (!Self::tmp_0(n)) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Variable(__all_data__),
                c in CallExpression(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp2 in c.getArguments()) {
                                if (r.key_eq(auto_tmp2)) {
                                    if (e.key_eq(r.getDefinition())) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp3 in c.getArguments()) {
                                if (e.key_eq(auto_tmp3)) {
                                    if (direction = "Depended") {
                                        if (type = "DD") {
                                            return e1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__),
                s in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp4 in c.getAnAncestor()) {
                                if (s.getReference().key_eq(auto_tmp4)) {
                                    for (auto_tmp5 in s.getArguments()) {
                                        if (auto_tmp5.key_eq(e)) {
                                            if (direction = "Depended") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorDDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (type = "DD") {
                if (e = self.getDDNode(type, direction)) {
                    return e
                }
                if (e = self.getAnAncestorDDNode(__all_data__, __all_data__).getDDNode(type, direction)) {
                    return e
                }
            }
        }
    }
    
    pub fn getCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (self.key_eq(r.getDefinition())) {
                if (c = r.getEnclosingCallable()) {
                    if (type = "CD") {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getAnAncestorCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getAnAncestorCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getAnAncestorCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getAnAncestorCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDNode(type, direction)) {
                return e
            }
            if (e = self.getDDNode(type, direction)) {
                return e
            }
        }
    }
    
    pub fn getAnAncestorECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), tmp in ECGNode(__all_data__)) {
            if (tmp = self.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (e = tmp.getECGNode(type, direction)) {
                    return e
                }
            }
        }
    }

    pub fn getAnAncestorCDDependedNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), c in Callable(__all_data__), r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c) || (self.key_eq(r.getDefinition()) && r.getEnclosingCallable() = c)) {
                    for (e2 in Method(__all_data__), c_caller in c.getAnAncestorCaller()) {
                        if (e2.key_eq(c_caller) && direction = "Depended" && e.key_eq(e2)) {
                            return e
                        }
                    }
                }
            }
        }
    }

    pub fn getECGDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDDependsNode(type, direction)) {
                return e
            }
            if (e = self.getDDDependsNode(type, direction)) {
                return e
            }
        }
    }

    pub fn getCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in c.getCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
            }
            for (v in Variable(__all_data__)) {
                if (self.key_eq(v)) {
                    if (v.key_eq(r.getDefinition())) {
                        if (c = r.getEnclosingCallable()) {
                            if (type = "CD") {
                                for (e1 in c.getCallee()) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getDDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp)) {
                                        if (n = c.getMethodName()) {
                                            if (!n.matches("get.*")) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getAnAncestorCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in c.getAnAncestorCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in c.getAnAncestorCallee()) {
                            if (direction = "Depends") {
                                if (e.key_eq(e1)) {
                                    return e
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getPath(self) -> string {
        for (line in int::__undetermined_all__(),
            t in string::__undetermined_all__(),
            path in string::__undetermined_all__(),
            info in string::__undetermined_all__()) {
            for (l in coref::java::Location(__all_data__)) {
                if (l = self.getLocation()) {
                    if (path = l.getFile().getRelativePath()) {
                        if (line = l.getStartLineNumber()) {
                            if (t = line.to_string()) {
                                if (info = path + ":" + t) {
                                    return info
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    fn tmp_0(n: string) -> bool {
        if (n.matches("get.*")) {
            return true
        }
    }
}

pub fn getJavaECGNode(node: int) -> bool {
    // #javaecgnode
    // example
    [ {1111} ]
}
pub fn getResponseType(t: ReferenceType) -> bool {
    let (java_db = default_java_db()) {
        for (r in string::__undetermined_all__()) {
            for (i in ClassOrInterface(java_db),
                c in ClassOrInterface(java_db)) {
                if (r in c.getImplementsList()) {
                    if (r = "implements Response") {
                        for (auto_tmp1 in i.getAnAscentantClassOrInterface()) {
                            if (c = auto_tmp1) {
                                if (t.getQualifiedName() = i.getQualifiedName()) {
                                    return true
                                }
                            }
                        }
                        if (c = i) {
                            if (t.getQualifiedName() = i.getQualifiedName()) {
                                return true
                            }
                        }
                    }
                }
                if (c.getName() = "BaseResponse") {
                    for (auto_tmp1 in i.getAnAscentantClassOrInterface()) {
                        if (c = auto_tmp1) {
                            if (t.getQualifiedName() = i.getQualifiedName()) {
                                return true
                            }
                        }
                    }
                    if (c = i) {
                        if (t.getQualifiedName() = i.getQualifiedName()) {
                            return true
                        }
                    }
                }
                if (c.getName() = "HttpResponse") {
                    for (auto_tmp1 in i.getAnAscentantClassOrInterface()) {
                        if (c = auto_tmp1) {
                            if (t.getQualifiedName() = i.getQualifiedName()) {
                                return true
                            }
                        }
                    }
                    if (c = i) {
                        if (t.getQualifiedName() = i.getQualifiedName()) {
                            return true
                        }
                    }
                }
            }
        }
    }
}
pub fn getResponseMethod(m: Method) -> bool {
    let (java_db = default_java_db()) {
        for (a in string::__undetermined_all__(),
            b in string::__undetermined_all__(),
            l in string::__undetermined_all__()) {
            for (t in ReferenceType(java_db)) {
                if (getResponseType(t)) {
                    if (m.getType().key_eq(t)) {
                        if (l = m.getLocation().getFile().getRelativePath()) {
                            if (!l.contains("src/test/java")) {
                                return true
                            }
                        }
                    }
                    if (b = m.getType().getName()) {
                        if (a = t.getName()) {
                            if (b.contains(a)) {
                                if (l = m.getLocation().getFile().getRelativePath()) {
                                    if (!l.contains("src/test/java")) {
                                        return true
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn temp(a: ECGNode, b: ECGNode, c: ECGNode, edgeType: string, direction: string) -> bool {
    let (java_db = default_java_db()) {
        if (getJavaECGNode(a.id)) {
            if (b = a.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (c = b.getECGNode(edgeType, direction)) {
                    if (b != c) {
                        return true
                    }
                }
            }
            if (b = a) {
                if (c = b.getECGNode(edgeType, direction)) {
                    if (b != c) {
                        return true
                    }
                }
            }
        }
    }
}
pub fn temp1(c: Callable) -> bool {
    let (java_db = default_java_db()) {
        for (a in Callable(java_db)) {
            if (getResponseMethod(Method(java_db).find(a))) {
                for (auto_tmp1 in a.getAnAncestorCaller()) {
                    if (c = auto_tmp1) {
                        return true
                    }
                }
                if (c = a) {
                    return true
                }
            }
        }
    }
}
pub fn temp2(a: ECGNode, b: ECGNode, c: ECGNode, direction: string, edgeType: string) -> bool {
    let (java_db = default_java_db()) {
        if (getJavaECGNode(a.id)) {
            if (b = a.getAnAncestorCDNode(__all_data__, "Depended")) {
                if (c = b.getECGNode(edgeType, "Depended")) {
                    if (temp1(Callable(java_db).find(c))) {
                        if (b != c) {
                            if (direction = "Depended") {
                                return true
                            }
                        }
                    }
                }
            }
            if (b = a) {
                if (c = b.getECGNode(edgeType, "Depended")) {
                    if (temp1(Callable(java_db).find(c))) {
                        if (b != c) {
                            if (direction = "Depended") {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn real_output(m: ECGNode, nodeType1: string, nodeText1: string, n: ECGNode, nodeType2: string, nodeText2: string, edgeType: string, direction: string) -> bool {
    let (java_db = default_java_db()) {
        for (e in ECGNode(java_db)) {
            if (temp2(e, m, n, edgeType, direction)) {
                if (nodeType1 = m.getType()) {
                    if (nodeText1 = m.print()) {
                        if (nodeText2 = n.print()) {
                            if (nodeType2 = n.getType()) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_java_db() -> JavaDB {
    return JavaDB::load("coref_java_src.db")
}

fn main() {
    output(real_output())
}