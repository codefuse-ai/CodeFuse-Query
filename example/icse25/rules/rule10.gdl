// script 
use coref::java::*
use coref::xml::*

schema ECGNode extends ElementParent {}

impl ECGNode {
    pub fn __all__(db: JavaDB) -> *ECGNode {
        for (tmp in ElementParent(db)) {
            for (m in Method(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Variable(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
            for (m in Expression(db)) {
                if (tmp.key_eq(m)) {
                    yield ECGNode {
                        id : tmp.id
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (m in Method(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Method") {
                        return t
                    }
                }
            }
            for (m in LocalVariable(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "LocalVariable") {
                        return t
                    }
                }
            }
            for (m in Parameter(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Parameter") {
                        return t
                    }
                }
            }
            for (m in Field(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "Field") {
                        return t
                    }
                }
            }
            for (m in EnumConstant(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = "EnumConstant") {
                        return t
                    }
                }
            }
            for (m in Expression(__all_data__)) {
                if (self.key_eq(m)) {
                    if (t = m.getType()) {
                        return t
                    }
                }
            }
        }
    }
    
    pub fn getDDNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (e in Parameter(__all_data__),
                c in Method(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        for (auto_tmp1 in c.getParameter()) {
                            if (e = auto_tmp1) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = r.getEnclosingCallable()) {
                            if (e.key_eq(r.getDefinition())) {
                                if (direction = "Depended") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (c in Callable(__all_data__),
                e in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c = e.getEnclosingCallable()) {
                            for (m in Method(__all_data__)) {
                                if (m = e.getMethod()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                            for (f in LombokField(__all_data__)) {
                                if (f = e.getLombokField()) {
                                    if (!isDirectCall(e)) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp_find = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp_find)) {
                                        if (n = c.getMethodName()) {
                                            if (Self::tmp_0(n)) {
                                                if (direction = "Depended") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                            if (!Self::tmp_0(n)) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Variable(__all_data__),
                c in CallExpression(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp2 in c.getArguments()) {
                                if (r.key_eq(auto_tmp2)) {
                                    if (e.key_eq(r.getDefinition())) {
                                        if (direction = "Depended") {
                                            if (type = "DD") {
                                                return e1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp3 in c.getArguments()) {
                                if (e.key_eq(auto_tmp3)) {
                                    if (direction = "Depended") {
                                        if (type = "DD") {
                                            return e1
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in CallExpression(__all_data__),
                c in CallExpression(__all_data__),
                s in CallExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (!isDirectCall(c)) {
                            for (auto_tmp4 in c.getAnAncestor()) {
                                if (s.getReference().key_eq(auto_tmp4)) {
                                    for (auto_tmp5 in s.getArguments()) {
                                        if (auto_tmp5.key_eq(e)) {
                                            if (direction = "Depended") {
                                                if (type = "DD") {
                                                    return e1
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorDDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (type = "DD") {
                if (e = self.getDDNode(type, direction)) {
                    return e
                }
                if (e = self.getAnAncestorDDNode(__all_data__, __all_data__).getDDNode(type, direction)) {
                    return e
                }
            }
        }
    }
    
    pub fn getCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (self.key_eq(r.getDefinition())) {
                if (c = r.getEnclosingCallable()) {
                    if (type = "CD") {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getAnAncestorCDNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in Method(__all_data__)) {
                        for (auto_tmp1 in c.getAnAncestorCallee()) {
                            if (e1.key_eq(auto_tmp1)) {
                                if (direction = "Depends") {
                                    if (e.key_eq(e1)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                    for (e2 in Method(__all_data__)) {
                        for (auto_tmp2 in c.getAnAncestorCaller()) {
                            if (e2.key_eq(auto_tmp2)) {
                                if (direction = "Depended") {
                                    if (e.key_eq(e2)) {
                                        return e
                                    }
                                }
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in Method(__all_data__)) {
                            for (auto_tmp1 in c.getAnAncestorCallee()) {
                                if (e1.key_eq(auto_tmp1)) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                        for (e2 in Method(__all_data__)) {
                            for (auto_tmp2 in c.getAnAncestorCaller()) {
                                if (e2.key_eq(auto_tmp2)) {
                                    if (direction = "Depended") {
                                        if (e.key_eq(e2)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    pub fn getECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDNode(type, direction)) {
                return e
            }
            if (e = self.getDDNode(type, direction)) {
                return e
            }
        }
    }
    
    pub fn getAnAncestorECGNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), tmp in ECGNode(__all_data__)) {
            if (tmp = self.getAnAncestorCDNode(__all_data__, __all_data__)) {
                if (e = tmp.getECGNode(type, direction)) {
                    return e
                }
            }
        }
    }

    pub fn getAnAncestorCDDependedNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__), c in Callable(__all_data__), r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c) || (self.key_eq(r.getDefinition()) && r.getEnclosingCallable() = c)) {
                    for (e2 in Method(__all_data__), c_caller in c.getAnAncestorCaller()) {
                        if (e2.key_eq(c_caller) && direction = "Depended" && e.key_eq(e2)) {
                            return e
                        }
                    }
                }
            }
        }
    }

    pub fn getECGDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__)) {
            if (e = self.getCDDependsNode(type, direction)) {
                return e
            }
            if (e = self.getDDDependsNode(type, direction)) {
                return e
            }
        }
    }

    pub fn getCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (self.key_eq(c)) {
                if (type = "CD") {
                    for (e1 in c.getCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
            }
            for (v in Variable(__all_data__)) {
                if (self.key_eq(v)) {
                    if (v.key_eq(r.getDefinition())) {
                        if (c = r.getEnclosingCallable()) {
                            if (type = "CD") {
                                for (e1 in c.getCallee()) {
                                    if (direction = "Depends") {
                                        if (e.key_eq(e1)) {
                                            return e
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getDDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e1 in ECGNode(__all_data__)) {
            for (r in ReturnStatement(__all_data__),
                c in Method(__all_data__),
                e in Expression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getEnclosingCallable())) {
                            if (e = r.getResult()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in Field(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (e in Callable(__all_data__),
                c in EnumConstant(__all_data__),
                r in ReferenceExpression(__all_data__)) {
                if (e.key_eq(e1)) {
                    if (self.key_eq(c)) {
                        if (c.key_eq(r.getDefinition())) {
                            if (e = r.getEnclosingCallable()) {
                                if (direction = "Depends") {
                                    if (type = "DD") {
                                        return e1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (n in string::__undetermined_all__()) {
                for (e in LombokField(__all_data__),
                    c in CallExpression(__all_data__)) {
                    if (e.key_eq(e1)) {
                        if (self.key_eq(c)) {
                            if (e = c.getLombokField()) {
                                let (tmp = CallExpression(__all_data__).find(e)) {
                                    if (!isDirectCall(tmp)) {
                                        if (n = c.getMethodName()) {
                                            if (!n.matches("get.*")) {
                                                if (direction = "Depends") {
                                                    if (type = "DD") {
                                                        return e1
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getAnAncestorCDDependsNode(self, type: string, direction: string) -> ECGNode {
        for (e in ECGNode(__all_data__),
            c in Callable(__all_data__),
            r in ReferenceExpression(__all_data__)) {
            if (type = "CD") {
                if (self.key_eq(c)) {
                    for (e1 in c.getAnAncestorCallee()) {
                        if (direction = "Depends") {
                            if (e.key_eq(e1)) {
                                return e
                            }
                        }
                    }
                }
                if (self.key_eq(r.getDefinition())) {
                    if (c = r.getEnclosingCallable()) {
                        for (e1 in c.getAnAncestorCallee()) {
                            if (direction = "Depends") {
                                if (e.key_eq(e1)) {
                                    return e
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pub fn getPath(self) -> string {
        for (line in int::__undetermined_all__(),
            t in string::__undetermined_all__(),
            path in string::__undetermined_all__(),
            info in string::__undetermined_all__()) {
            for (l in coref::java::Location(__all_data__)) {
                if (l = self.getLocation()) {
                    if (path = l.getFile().getRelativePath()) {
                        if (line = l.getStartLineNumber()) {
                            if (t = line.to_string()) {
                                if (info = path + ":" + t) {
                                    return info
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    fn tmp_0(n: string) -> bool {
        if (n.matches("get.*")) {
            return true
        }
    }
}

schema ECGXmlNode {
    @primary id: int
}

impl ECGXmlNode {
    pub fn __all__(db: XmlDB) -> *ECGXmlNode {
        for (e in XmlPomElement(db)) {
            yield ECGXmlNode {id : e.id}
        }
        for (e in XmlSpringElement(db)) {
            yield ECGXmlNode {id : e.id}
        }
        for (e in XmlCharacter(db)) {
            yield ECGXmlNode {id : e.id}
        }
        for (e in XmlAttribute(db)) {
            yield ECGXmlNode {id : e.id}
        }
    }
    
    pub fn getLocation(self) -> coref::xml::Location {
        for (l in coref::xml::Location(__all_data__)) {
            for (e in XmlElement(__all_data__)) {
                if (self.key_eq(e)) {
                    if (l = e.getLocation()) {
                        return l
                    }
                }
            }
            for (e in XmlAttribute(__all_data__)) {
                if (self.key_eq(e)) {
                    if (l = e.getLocation()) {
                        return l
                    }
                }
            }
            for (e in XmlCharacter(__all_data__)) {
                if (self.key_eq(e)) {
                    if (l = e.getLocation()) {
                        return l
                    }
                }
            }
        }
    }
    
    pub fn getType(self) -> string {
        for (t in string::__undetermined_all__()) {
            for (e in XmlElement(__all_data__)) {
                if (self.key_eq(e)) {
                    if (t = "XmlElement") {
                        return t
                    }
                }
            }
            for (e in XmlAttribute(__all_data__)) {
                if (self.key_eq(e)) {
                    if (t = "XmlAttribute") {
                        return t
                    }
                }
            }
            for (e in XmlCharacter(__all_data__)) {
                if (self.key_eq(e)) {
                    if (t = "XmlCharacter") {
                        return t
                    }
                }
            }
        }
    }

    pub fn getText(self) -> string {
        for (e in XmlElement(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getName()
            }
        }
        for (e in XmlAttribute(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getName() + " = " + e.getValue()
            }
        }
        for (e in XmlCharacter(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getText()
            }
        }
    }

    pub fn getEnclosingECGXmlNode(self) -> ECGXmlNode {
        for (e in XmlElement(__all_data__)) {
            if (self.key_eq(e)) {
                return e.to<ECGXmlNode>()
            }
        }
        for (e in XmlAttribute(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getXmlElement().to<ECGXmlNode>()
            }
        }
        for (e in XmlCharacter(__all_data__)) {
            if (self.key_eq(e)) {
                return e.getBelongedElement().to<ECGXmlNode>()
            }
        }
    }
}

pub fn xmlOutput(bindingType: string, interfaceName: string, uniqueId: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (s in SofaReferenceXmlElement(xml_db),
                t in TrTagXmlElement(xml_db)) {
                if (s.key_eq(t.getParent())) {
                    if (interfaceName = s.getInterfaceName()) {
                        if (uniqueId = s.getUniqueId()) {
                            if (bindingType = "tr") {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getXMLInterfaceName(s: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            if (xmlOutput(__all_data__, s, __all_data__)) {
                return true
            }
        }
    }
}
pub fn exclude(n: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (c in Class(java_db)) {
                if (n = c.getQualifiedName()) {
                    return true
                }
            }
            for (i in Interface(java_db)) {
                if (n = i.getQualifiedName()) {
                    return true
                }
            }
        }
    }
}
schema TrInterface1 extends Import {
    
}

impl TrInterface1 {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *TrInterface1 {
        for (tmp in Import(db)) {
            for (s in string::__undetermined_all__()) {
                if (s = tmp.getName()) {
                    if (getXMLInterfaceName(s)) {
                        if (!exclude(s)) {
                            yield TrInterface1 {
                                element_hash_id : tmp.element_hash_id,
                                reference_hash_id : tmp.reference_hash_id,
                                name : tmp.name,
                                parent_hash_id : tmp.parent_hash_id,
                                location_hash_id : tmp.location_hash_id,
                                is_foreign_import : tmp.is_foreign_import
                            }
                        }
                    }
                }
            }
        }
    }
    
    
}

pub fn output2(n: string, m: string, i: Identifier, r: ReferenceExpression) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (s in int::__undetermined_all__()) {
                for (t in TrInterface1(java_db)) {
                    if (i.getParent() = r.getParent()) {
                        if (s = r.getLocation().getFile().element_hash_id) {
                            if (s = t.getContainingFile().element_hash_id) {
                                if (n = t.getName()) {
                                    if (t.getTargetName() = r.getPrintableText()) {
                                        if (m = i.getName()) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn matachField(im: TrInterface1, f: Field) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (t in int::__undetermined_all__(),
                s in string::__undetermined_all__()) {
                if (t = f.getLocation().getFile().element_hash_id) {
                    if (f.getType().getName() = s) {
                        if (s = im.getTargetName()) {
                            if (t = im.getContainingFile().element_hash_id) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn matchMethod(im: TrInterface1, f: Method) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (t in int::__undetermined_all__(),
                s in string::__undetermined_all__()) {
                if (t = f.getLocation().getFile().element_hash_id) {
                    if (f.getType().getName() = s) {
                        if (s = im.getTargetName()) {
                            if (t = im.getContainingFile().element_hash_id) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn matchLocalVariable(im: TrInterface1, f: LocalVariable) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (t in int::__undetermined_all__(),
                s in string::__undetermined_all__()) {
                if (t = f.getLocation().getFile().element_hash_id) {
                    if (f.getType().getName() = s) {
                        if (s = im.getTargetName()) {
                            if (im.getContainingFile().element_hash_id = t) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn matchParameter(im: TrInterface1, f: Parameter) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (t in int::__undetermined_all__(),
                s in string::__undetermined_all__()) {
                if (f.getType().getName() = s) {
                    if (s = im.getTargetName()) {
                        if (t = f.getLocation().getFile().element_hash_id) {
                            if (im.getContainingFile().element_hash_id = t) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn output3(id: string, m: string, iden: Identifier, r1: Expression) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (r in ReferenceExpression(java_db),
                im in TrInterface1(java_db)) {
                if (r.key_eq(r1)) {
                    if (r.getParent() = iden.getParent()) {
                        for (f in Field(java_db)) {
                            if (f.key_eq(r.getDefinition())) {
                                if (matachField(im, f)) {
                                    if (id = im.getName()) {
                                        if (m = iden.getName()) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                        for (l in LocalVariable(java_db)) {
                            if (l.key_eq(r.getDefinition())) {
                                if (matchLocalVariable(im, l)) {
                                    if (id = im.getName()) {
                                        if (m = iden.getName()) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                        for (l in Parameter(java_db)) {
                            if (l.key_eq(r.getDefinition())) {
                                if (matchParameter(im, l)) {
                                    if (id = im.getName()) {
                                        if (m = iden.getName()) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (r in MethodAccessExpression(java_db),
                im in TrInterface1(java_db)) {
                if (r.key_eq(r1)) {
                    if (r.getParent() = iden.getParent()) {
                        for (l in Method(java_db)) {
                            if (l = r.getMethod()) {
                                if (matchMethod(im, l)) {
                                    if (id = im.getName()) {
                                        if (m = iden.getName()) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (output2(id, m, iden, ReferenceExpression(java_db).find(r1))) {
                return true
            }
        }
    }
}
pub fn importOutput(className: string, methodName: string, fileName: string, lineNumber: int, c: Callable) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (t in TrInterface1(java_db),
                r in Expression(java_db)) {
                if (className = t.getName()) {
                    if (getXMLInterfaceName(className)) {
                        if (!exclude(className)) {
                            if (tmp_0(className)) {
                                if (output3(className, methodName, __all_data__, r)) {
                                    if (fileName = r.getLocation().getFile().getRelativePath()) {
                                        if (lineNumber = r.getLocation().getStartLineNumber()) {
                                            if (c = r.getEnclosingCallable()) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                            if (!(tmp_0(className))) {
                                if (methodName = "null") {
                                    if (fileName = "null") {
                                        if (lineNumber = 0) {
                                            if (c.id = 0) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
schema TrInterface extends Interface {
    
}

impl TrInterface {

    @data_constraint
    @inline
    pub fn __all__(db: JavaDB) -> *TrInterface {
        for (tmp in Interface(db)) {
            for (s in string::__undetermined_all__()) {
                if (s = tmp.getQualifiedName()) {
                    if (getXMLInterfaceName(s)) {
                        yield TrInterface {
                            element_hash_id : tmp.element_hash_id,
                            qualified_name : tmp.qualified_name,
                            identifier_hash_id : tmp.identifier_hash_id,
                            location_hash_id : tmp.location_hash_id,
                            parent_hash_id : tmp.parent_hash_id
                        }
                    }
                }
            }
        }
    }
    
    pub fn getCallable(self) -> Callable {
        for (m in Callable(__all_data__)) {
            if (self.key_eq(m.getBelongedInterface())) {
                return m
            }
        }
    }
    
    pub fn getCallSite(self, d: Callable) -> Expression {
        for (c1 in Expression(__all_data__)) {
            if (d = self.getCallable()) {
                for (c in MethodAccessExpression(__all_data__)) {
                    if (c.key_eq(c1)) {
                        if (d.key_eq(c.getMethod())) {
                            return c1
                        }
                    }
                }
                for (c in MethodReferenceExpression(__all_data__)) {
                    if (c.key_eq(c1)) {
                        if (d.key_eq(c.getMethod())) {
                            return c1
                        }
                    }
                }
            }
        }
    }
    
    
}

pub fn getCallers(c: Callable) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (m in Callable(java_db)) {
                for (auto_tmp1 in c.getCaller()) {
                    if (m = auto_tmp1) {
                        return true
                    }
                }
            }
        }
    }
}
pub fn selfDefineOutput(interfaceName: string, methodName: string, fileName: string, lineNumber: int, c: Callable) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (i in TrInterface(java_db)) {
                if (c = i.getCallable()) {
                    if (interfaceName = i.getQualifiedName()) {
                        if (methodName = c.getName()) {
                            if (tmp_1(c)) {
                                for (e in Expression(java_db)) {
                                    if (e = i.getCallSite(c)) {
                                        if (fileName = e.getLocation().getFile().getRelativePath()) {
                                            if (lineNumber = e.getLocation().getStartLineNumber()) {
                                                if (c.id = e.getEnclosingCallable().id) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (!(tmp_1(c))) {
                                if (fileName = "null") {
                                    if (lineNumber = 0) {
                                        if (c.id = 0) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getJavaECGNode(id: int) -> bool {
    // #javaecgnode
    // example
    [ {1111} ]
}
pub fn getDependsECGNode(id: Callable, c: ECGNode) -> bool {
    let (java_db = default_java_db()) {
        for (e in Callable(java_db)) {
            if (getJavaECGNode(c.id) && e.key_eq(c)) {
                if (id in e.getAnAncestorCallee()) {
                    return true
                }
                if (id.key_eq(c)) {
                    return true
                }
            }
        }
    }
}
pub fn real_output(bindingType: string, uniqueId: string, interfaceName: string, methodName: string, filePath: string, lineNumber: int, ecgNodeId: ECGNode) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            for (m in Callable(java_db)) {
                if (xmlOutput(bindingType, interfaceName, uniqueId)) {
                    if (selfDefineOutput(interfaceName, methodName, filePath, lineNumber, m)) {
                        if (!filePath.contains("src/test/java")) {
                            if (getDependsECGNode(m, ecgNodeId)) {
                                return true
                            }
                        }
                    }
                    if (importOutput(interfaceName, methodName, filePath, lineNumber, m)) {
                        if (!filePath.contains("src/test/java")) {
                            if (getDependsECGNode(m, ecgNodeId)) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_java_db() -> JavaDB {
    return JavaDB::load("coref_java_src.db")
}

fn default_xml_db() -> XmlDB {
    return XmlDB::load("coref_xml_src.db")
}

fn tmp_0(className: string) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            if (output3(className, __all_data__, __all_data__, __all_data__)) {
                return true
            }
        }
    }
}

fn tmp_1(c: Callable) -> bool {
    let (java_db = default_java_db()) {
        let (xml_db = default_xml_db()) {
            if (getCallers(Callable(java_db).find(c))) {
                return true
            }
        }
    }
}

fn main() {
    output(real_output())
}