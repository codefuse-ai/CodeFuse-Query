// script 
use coref::javascript::*

pub fn getInfluencedTrAPI(appName: string, facadeQualifiedName: string, trMethodName: string) -> bool {
    // #rule18结果
    // example
    [
        {"finpdcenter", "com.xxx.filtered.BlockFacade", "load"},
        {"finpdcenter", "com.xxx.filtered.BlockFacade", "batchLoad"}
    ]
}
pub fn rpcNameControllerFunctionIdentifier(rpcName: string, controllerFunctionIdentifier: Expression) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (callExpression in CallExpression(javascript_db)) {
            for (routerFile in File(javascript_db)) {
                for (routerPath in string::__undetermined_all__()) {
                    if (routerPath = routerFile.getRelativePath()) {
                        if (routerPath.matches("app/router(\\.[jt]s|/.+\\.[jt]s)")) {
                            if (callExpression.getLocation().getFile() = routerFile) {
                                for (accessExpression in AccessExpression(javascript_db),
                                    property in Expression(javascript_db)) {
                                    if (accessExpression.key_eq(callExpression.getExpression())) {
                                        if (property = accessExpression.getPropertyExpression()) {
                                            if (property.getText() = "rpc") {
                                                for (rpcNameStringLiteral in StringLiteral(javascript_db)) {
                                                    if (rpcNameStringLiteral.key_eq(callExpression.getArgument(0))) {
                                                        if (rpcName = rpcNameStringLiteral.getValue()) {
                                                            let (argumentCount = callExpression.getArgumentCount()) {
                                                                if (controllerFunctionIdentifier = callExpression.getArgument(argumentCount - 1)) {
                                                                    return true
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (property.getText() = "rpcAndGet") {
                                                for (rpcNameStringLiteral in StringLiteral(javascript_db)) {
                                                    if (rpcNameStringLiteral.key_eq(callExpression.getArgument(0))) {
                                                        if (rpcName = rpcNameStringLiteral.getValue()) {
                                                            let (argumentCount = callExpression.getArgumentCount()) {
                                                                if (controllerFunctionIdentifier = callExpression.getArgument(argumentCount - 1)) {
                                                                    return true
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (property.getText() = "rpcAndPost") {
                                                for (rpcNameStringLiteral in StringLiteral(javascript_db)) {
                                                    if (rpcNameStringLiteral.key_eq(callExpression.getArgument(0))) {
                                                        if (rpcName = rpcNameStringLiteral.getValue()) {
                                                            let (argumentCount = callExpression.getArgumentCount()) {
                                                                if (controllerFunctionIdentifier = callExpression.getArgument(argumentCount - 1)) {
                                                                    return true
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn rpcNameControllerFunction(rpcName: string, controllerFunction: FunctionLikeDeclaration) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (controllerFunctionIdentifier in Expression(javascript_db)) {
            if (rpcNameControllerFunctionIdentifier(rpcName, controllerFunctionIdentifier)) {
                for (symbol in Symbol(javascript_db)) {
                    if (symbol = controllerFunctionIdentifier.getSymbol()) {
                        if (controllerFunction.getSymbol() = symbol) {
                            return true
                        }
                        for (variableDeclaration in VariableDeclaration(javascript_db)) {
                            if (variableDeclaration.getSymbol() = symbol) {
                                if (controllerFunction.key_eq(variableDeclaration.getInitializer())) {
                                    return true
                                }
                            }
                        }
                        for (propertyDeclaration in PropertyDeclaration(javascript_db)) {
                            if (propertyDeclaration.getSymbol() = symbol) {
                                if (controllerFunction.key_eq(propertyDeclaration.getInitializer())) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn controllerReturnField(controllerFunc: FunctionLikeDeclaration, fieldName: string) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (simpleAssignmentExpression in SimpleAssignmentExpression(javascript_db)) {
            for (auto_tmp1 in simpleAssignmentExpression.getAnAncestorEnclosingFunction()) {
                if (auto_tmp1 = controllerFunc) {
                    for (leftOperandText in string::__undetermined_all__()) {
                        for (leftOperand in Expression(javascript_db)) {
                            if (leftOperand = simpleAssignmentExpression.getLeftOperand()) {
                                if (leftOperandText = leftOperand.getText()) {
                                    if (leftOperandText.matches("(this\\.|ctx\\.|this\\.ctx\\.)?body")) {
                                        for (object in ObjectLiteralExpression(javascript_db),
                                            objectElement in ObjectLiteralElement(javascript_db)) {
                                            if (object.key_eq(simpleAssignmentExpression.getRightOperand())) {
                                                if (objectElement = object.getPropertyByName(fieldName)) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn serviceCallSite(serviceCaller: CallExpression, serviceFunction: FunctionLikeDeclaration) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (expressionText in string::__undetermined_all__()) {
            for (expression in PropertyAccessExpression(javascript_db)) {
                if (expression.key_eq(serviceCaller.getExpression())) {
                    if (expressionText = expression.getText()) {
                        if (expressionText.matches("(this\\.|ctx\\.|this\\.ctx\\.)?service\\.(.+)")) {
                            if (serviceFunction = serviceCaller.getCallee()) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getAnDescendantServiceCallee(serviceCaller: CallExpression, descendantServiceCallee: FunctionLikeDeclaration) -> bool {
    let (javascript_db = default_javascript_db()) {
        if (serviceCallSite(serviceCaller, descendantServiceCallee)) {
            return true
        }
        for (serviceCallee in FunctionLikeDeclaration(javascript_db),
            childServiceCaller in CallExpression(javascript_db)) {
            if (serviceCallSite(serviceCaller, serviceCallee)) {
                for (auto_tmp1 in childServiceCaller.getAnAncestorEnclosingFunction()) {
                    if (auto_tmp1 = serviceCallee) {
                        if (getAnDescendantServiceCallee(childServiceCaller, descendantServiceCallee)) {
                            return true
                        }
                    }
                }
            }
        }
    }
}
pub fn proxyCallerDesc(proxyCaller: CallExpression, facadeName: string, trFuncName: string) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (expression in PropertyAccessExpression(javascript_db)) {
            if (expression.key_eq(proxyCaller.getExpression())) {
                for (facadeExpressionText in string::__undetermined_all__()) {
                    for (facadeExpression in LeftHandSideExpression(javascript_db)) {
                        for (leftHandSideExpression in LeftHandSideExpression(javascript_db)) {
                            if (leftHandSideExpression = expression.getExpression()) {
                                for (callExpression in CallExpression(javascript_db)) {
                                    if (callExpression.key_eq(leftHandSideExpression)) {
                                        for (usingExpression in PropertyAccessExpression(javascript_db)) {
                                            if (usingExpression.key_eq(callExpression.getExpression())) {
                                                if (facadeExpression = usingExpression.getExpression()) {
                                                    if (facadeExpressionText = facadeExpression.getText()) {
                                                        if (facadeName = facadeExpressionText.get_regex_match_result("(this\\.|ctx\\.|this\\.ctx\\.)?proxy\\.(.+)", 2)) {
                                                            if (facadeName != "") {
                                                                for (serviceFuncIdentifier in Identifier(javascript_db)) {
                                                                    if (serviceFuncIdentifier.key_eq(expression.getProperty())) {
                                                                        if (trFuncName = serviceFuncIdentifier.getText()) {
                                                                            if (trFuncName != "using") {
                                                                                return true
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (isPropertyAccessExpression(Node(javascript_db).find(leftHandSideExpression))) {
                                    if (facadeExpression = leftHandSideExpression) {
                                        if (facadeExpressionText = facadeExpression.getText()) {
                                            if (facadeName = facadeExpressionText.get_regex_match_result("(this\\.|ctx\\.|this\\.ctx\\.)?proxy\\.(.+)", 2)) {
                                                if (facadeName != "") {
                                                    for (serviceFuncIdentifier in Identifier(javascript_db)) {
                                                        if (serviceFuncIdentifier.key_eq(expression.getProperty())) {
                                                            if (trFuncName = serviceFuncIdentifier.getText()) {
                                                                if (trFuncName != "using") {
                                                                    return true
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn getAppFacade(appName: string, proxyFacadeName: string, facadeQualifiedName: string) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (objectLiteralExpression in ObjectLiteralExpression(javascript_db)) {
            for (proxyPath in string::__undetermined_all__()) {
                for (file in File(javascript_db),
                    location in Location(javascript_db),
                    servicePropertyAssignment in PropertyAssignment(javascript_db),
                    arrayLiteralExpression in ArrayLiteralExpression(javascript_db)) {
                    if (proxyPath = file.getRelativePath()) {
                        if (proxyPath.matches("config/proxy\\.[jt]s")) {
                            if (location.getFile() = file) {
                                if (servicePropertyAssignment.getLocation() = location) {
                                    if (servicePropertyAssignment.getName() = "services") {
                                        if (arrayLiteralExpression.key_eq(servicePropertyAssignment.getInitializer())) {
                                            for (auto_tmp1 in arrayLiteralExpression.getAElement()) {
                                                if (objectLiteralExpression.key_eq(auto_tmp1)) {
                                                    for (appNamePropertyAssignment in PropertyAssignment(javascript_db),
                                                        appNameString in StringLiteral(javascript_db)) {
                                                        if (appNamePropertyAssignment = objectLiteralExpression.getPropertyAssignmentByName("appname")) {
                                                            if (appNameString.key_eq(appNamePropertyAssignment.getInitializer())) {
                                                                if (appName = appNameString.getValue()) {
                                                                    for (apiPropertyAssignment in PropertyAssignment(javascript_db),
                                                                        apiObject in ObjectLiteralExpression(javascript_db),
                                                                        facadePropertyAssignment in PropertyAssignment(javascript_db)) {
                                                                        if (apiPropertyAssignment = objectLiteralExpression.getPropertyAssignmentByName("api")) {
                                                                            if (apiObject.key_eq(apiPropertyAssignment.getInitializer())) {
                                                                                for (auto_tmp2 in apiObject.getAProperty()) {
                                                                                    if (facadePropertyAssignment.key_eq(auto_tmp2)) {
                                                                                        if (proxyFacadeName = facadePropertyAssignment.getName()) {
                                                                                            for (facadeStringLiteral in StringLiteral(javascript_db)) {
                                                                                                if (facadeStringLiteral.key_eq(facadePropertyAssignment.getInitializer())) {
                                                                                                    if (facadeQualifiedName = facadeStringLiteral.getValue()) {
                                                                                                        return true
                                                                                                    }
                                                                                                }
                                                                                                for (facadeObject in ObjectLiteralExpression(javascript_db),
                                                                                                    interfaceNamePropertyAssignment in PropertyAssignment(javascript_db)) {
                                                                                                    if (facadeObject.key_eq(facadePropertyAssignment.getInitializer())) {
                                                                                                        if (interfaceNamePropertyAssignment = facadeObject.getPropertyAssignmentByName("interfaceName")) {
                                                                                                            if (facadeStringLiteral.key_eq(interfaceNamePropertyAssignment.getInitializer())) {
                                                                                                                if (facadeQualifiedName = facadeStringLiteral.getValue()) {
                                                                                                                    return true
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
pub fn real_output(rpcName: string, facadeName: string, trFuncName: string, rpcFieldName: string, trFieldName: string) -> bool {
    let (javascript_db = default_javascript_db()) {
        for (controllerFunc in FunctionLikeDeclaration(javascript_db),
            serviceCaller in CallExpression(javascript_db),
            serviceCallee in MethodDeclaration(javascript_db),
            proxyCaller in CallExpression(javascript_db)) {
            for (facadeProxyName in string::__undetermined_all__()) {
                if (getInfluencedTrAPI(__all_data__, facadeName, trFuncName)) {
                    if (proxyCallerDesc(proxyCaller, facadeProxyName, trFuncName)) {
                        if (getAppFacade(__all_data__, facadeProxyName, facadeName)) {
                            if (rpcNameControllerFunction(rpcName, controllerFunc)) {
                                if (controllerReturnField(controllerFunc, rpcFieldName)) {
                                    if (trFieldName = rpcFieldName) {
                                        for (auto_tmp1 in serviceCaller.getAnAncestorEnclosingFunction()) {
                                            if (auto_tmp1 = controllerFunc) {
                                                if (getAnDescendantServiceCallee(serviceCaller, FunctionLikeDeclaration(javascript_db).find(serviceCallee))) {
                                                    for (auto_tmp2 in proxyCaller.getAnAncestorEnclosingFunction()) {
                                                        if (auto_tmp2 = controllerFunc) {
                                                            return true
                                                        }
                                                    }
                                                    for (auto_tmp3 in proxyCaller.getAnAncestorEnclosingFunction()) {
                                                        if (auto_tmp3.key_eq(serviceCallee)) {
                                                            return true
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (tmp_0(controllerFunc).len() = 0) {
                                    if (rpcFieldName = "") {
                                        if (trFieldName = rpcFieldName) {
                                            for (auto_tmp1 in serviceCaller.getAnAncestorEnclosingFunction()) {
                                                if (auto_tmp1 = controllerFunc) {
                                                    if (getAnDescendantServiceCallee(serviceCaller, FunctionLikeDeclaration(javascript_db).find(serviceCallee))) {
                                                        for (auto_tmp2 in proxyCaller.getAnAncestorEnclosingFunction()) {
                                                            if (auto_tmp2 = controllerFunc) {
                                                                return true
                                                            }
                                                        }
                                                        for (auto_tmp3 in proxyCaller.getAnAncestorEnclosingFunction()) {
                                                            if (auto_tmp3.key_eq(serviceCallee)) {
                                                                return true
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


fn default_javascript_db() -> JavascriptDB {
    return JavascriptDB::load("coref_javascript_src.db")
}

fn tmp_0(controllerFunc: FunctionLikeDeclaration) -> *FunctionLikeDeclaration {
    let (javascript_db = default_javascript_db()) {
        for (_ in string::__undetermined_all__()) {
            for (func in FunctionLikeDeclaration(javascript_db)) {
                if (func = controllerFunc) {
                    if (controllerReturnField(func, __all_data__)) {
                        yield func
                    }
                }
            }
        }
    }
}

fn main() {
    output(real_output())
}